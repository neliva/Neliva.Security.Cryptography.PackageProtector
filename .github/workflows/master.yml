name: master

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [published]

# https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables
# https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions

jobs:
  build:

    runs-on: ubuntu-latest
    
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      ARTIFACTS_PATH: ${{ github.workspace }}/artifacts
      BUILD_VERSION_SUFFIX: build.${{ github.run_number }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
#    - name: Setup .NET Core
#      uses: actions/setup-dotnet@v1
#      with:
#        dotnet-version: 3.1.202
    - name: Extract SemVer from git tag
      id: semver
      run: |
        release=false
        major=0
        minor=1
        patch=0
        build=$((${{ github.run_number }}%65534))
        prerelease="-ci.${{ github.run_number }}"
        buildlabel=""
        verRegex="^p(refs)/(pull)/(6)/(merge)$"
        if [[ "${{ github.ref }}" =~ $verRegex ]]; then
            release=true
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            if [ ${#BASH_REMATCH[@]} -gt 4 ]; then
                prerelease=-${BASH_REMATCH[4]}
            else
                prerelease=""
            fi
            buildlabel="+build.${{ github.run_number }}"
        fi
        echo ::set-output name=Release::${release}
        echo ::set-output name=AssemblyVersion::${major}.0.0
        echo ::set-output name=FileVersion::${major}.${minor}.${patch}.${build}
        echo ::set-output name=InformationalVersion::${major}.${minor}.${patch}${prerelease}${buildlabel}
        echo ::set-output name=PackageVersion::${major}.${minor}.${patch}${prerelease}
    - name: Show SemVer details
#      if: steps.semver.outputs.release == 'true'
      run: |
        echo Ref: ${{ github.ref }}
        echo SHA: ${{ github.sha }}
        echo Release: ${{ steps.semver.outputs.Release }}
        echo AssemblyVersion: ${{ steps.semver.outputs.AssemblyVersion }}
        echo FileVersion: ${{ steps.semver.outputs.FileVersion }}
        echo InformationalVersion: ${{ steps.semver.outputs.InformationalVersion }}
        echo PackageVersion: ${{ steps.semver.outputs.PackageVersion }}
 #   - name: Install dependencies
 #     run: dotnet restore
 #   - name: Build
 #     run: dotnet build --configuration Release --no-restore --nologo -p:VersionSuffix=${{ env.BUILD_VERSION_SUFFIX }}
 #   - name: Test
 #     run: dotnet test --configuration Release --no-build --no-restore --nologo --verbosity normal -p:VersionSuffix=${{ env.BUILD_VERSION_SUFFIX }}
 #   - name: Pack
 #     run: dotnet pack --configuration Release --no-build --no-restore --nologo --output ${{ env.ARTIFACTS_PATH }} -p:VersionSuffix=${{ env.BUILD_VERSION_SUFFIX }}
  #  - name: Upload artifacts
 #     uses: actions/upload-artifact@v2
 #     with:
 #       name: artifacts-${{ env.BUILD_VERSION_SUFFIX }}+${{ github.sha }}
  #      path: ${{ env.ARTIFACTS_PATH }}
#    - name: Add GitHub NuGet feed source
#      run: dotnet nuget add source https://nuget.pkg.github.com/neliva/index.json --name GitHub --username neliva --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
#    - name: Push to GitHub NuGet feed
#      run: dotnet nuget push *.nupkg --source GitHub --timeout 120 --disable-buffering true
#      working-directory: ./artifacts