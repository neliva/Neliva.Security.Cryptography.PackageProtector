# This is free and unencumbered software released into the public domain.
# See the UNLICENSE file in the project root for more information.

name: main

on:
  push:
    branches: [ main ]
    paths-ignore:
    - 'README.md'
    - 'UNLICENSE.md'
    - '.gitignore'
    - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - 'README.md'
    - 'UNLICENSE.md'
    - '.gitignore'
    - 'docs/**'
  release:
    types: [ published ]

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 10

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Make SemVer from git tag
      id: semver
      run: |
        isRelease=false
        major=0
        minor=1
        patch=0
        build=$((${{ github.run_number }}%65534))
        prerelease="-ci.${{ github.run_number }}"
        buildlabel=""
        longsha=${{ github.sha }}
        shortsha=${longsha:0:8}
        shasuffix=+${shortsha}
        verRegex="^refs/tags/[vV]?\
        (0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\
        (-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?$"
        if [[ "${{ github.ref }}" =~ $verRegex ]]; then
            isRelease=true
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            if [ ${#BASH_REMATCH[@]} -gt 4 ]; then
                prerelease=${BASH_REMATCH[4]}
            else
                prerelease=""
            fi
            buildlabel="+build.${{ github.run_number }}"
            shasuffix=.${shortsha}
        fi
        echo OfficialRelease=${isRelease} >> $GITHUB_OUTPUT
        echo AssemblyVersion=${major}.0.0 >> $GITHUB_OUTPUT
        echo FileVersion=${major}.${minor}.${patch}.${build} >> $GITHUB_OUTPUT
        echo InformationalVersion=${major}.${minor}.${patch}${prerelease}${buildlabel} >> $GITHUB_OUTPUT
        echo PackageVersion=${major}.${minor}.${patch}${prerelease} >> $GITHUB_OUTPUT
        echo ArtifactsVersion=${major}.${minor}.${patch}${prerelease}${buildlabel}${shasuffix} >> $GITHUB_OUTPUT
    - name: Show build version
      run: |
        echo EventName: ${{ github.event_name }}
        echo Ref: ${{ github.ref }}
        echo Repo: ${{ github.repository }}
        echo SHA: ${{ github.sha }}
        echo OfficialRelease: ${{ steps.semver.outputs.OfficialRelease }}
        echo AssemblyVersion: ${{ steps.semver.outputs.AssemblyVersion }}
        echo FileVersion: ${{ steps.semver.outputs.FileVersion }}
        echo InformationalVersion: ${{ steps.semver.outputs.InformationalVersion }}
        echo PackageVersion: ${{ steps.semver.outputs.PackageVersion }}
        echo ArtifactsVersion: ${{ steps.semver.outputs.ArtifactsVersion }}
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3    # https://github.com/actions/setup-dotnet
      with:
        dotnet-version: 6.0.x
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore --nologo -p:AssemblyVersion=${{ steps.semver.outputs.AssemblyVersion }} -p:FileVersion=${{ steps.semver.outputs.FileVersion }} -p:InformationalVersion=${{ steps.semver.outputs.InformationalVersion }} -p:PackageVersion=${{ steps.semver.outputs.PackageVersion }}
    - name: Test
      run: dotnet test --configuration Release --no-build --no-restore --nologo --verbosity normal -p:AssemblyVersion=${{ steps.semver.outputs.AssemblyVersion }} -p:FileVersion=${{ steps.semver.outputs.FileVersion }} -p:InformationalVersion=${{ steps.semver.outputs.InformationalVersion }} -p:PackageVersion=${{ steps.semver.outputs.PackageVersion }}
    - name: Pack
      run: dotnet pack --configuration Release --no-build --no-restore --nologo --output ./artifacts -p:AssemblyVersion=${{ steps.semver.outputs.AssemblyVersion }} -p:FileVersion=${{ steps.semver.outputs.FileVersion }} -p:InformationalVersion=${{ steps.semver.outputs.InformationalVersion }} -p:PackageVersion=${{ steps.semver.outputs.PackageVersion }}
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}.${{ steps.semver.outputs.ArtifactsVersion }}
        path: ./artifacts
    - name: Push to NuGet.org feed
      if: github.event_name == 'release' && steps.semver.outputs.OfficialRelease == 'true'
      run: dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --timeout 90 --disable-buffering
      working-directory: ./artifacts
#   - name: Add GitHub nuget feed source
#     if: github.event_name == 'release' && steps.semver.outputs.OfficialRelease == 'true'
#     run: dotnet nuget add source https://nuget.pkg.github.com/neliva/index.json --name GitHub --username neliva --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text
#   - name: Push to GitHub nuget feed
#     if: github.event_name == 'release' && steps.semver.outputs.OfficialRelease == 'true'
#     run: dotnet nuget push *.nupkg --source GitHub --timeout 90 --disable-buffering
#     working-directory: ./artifacts
